{
  "hash": "65412a4ddd4b54523b0c19d3200ea385",
  "result": {
    "markdown": "---\ntitle: \"Hockey Hat Tricks\"\nauthor: \"Dan MacGuigan\"\ndate: \"2024-02-22\"\ncategories: [python, API, visualization, sports, hockey]\n\ncss: styles.css\n---\n\nIn hockey (and some other sports), a hat trick is three goals scored by the same player in a single game. How common are hat tricks in the NHL?\n\nWe'll again turn to the NHL's [stats database](https://www.nhl.com/stats/), with API documentation help from [here](https://gitlab.com/dword4/nhlapi/-/blob/master/new-api.md) and [here](https://github.com/Zmalski/NHL-API-Reference?tab=readme-ov-file#get-team-roster-by-season).\n\nFirst, let's just look at the 2022-2023 season for one team. How about the Buffalo Sabres? We'll need to loop through every Sabres game from this season and find games with hat tricks.\n\nLet's look at the data structure. Here's the first Sabres game that season.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nimport json\n\nteam = \"BUF\"\nseason = 20222023\nlink = \"https://api-web.nhle.com/v1/club-schedule-season/\" + str(team) + \"/\" + str(season)\nprint(link)\nsched = json.loads(requests.get(link).text) # pull request, get data (.text), and convert JSON to a Python dict\ngame1 = sched[\"games\"][0] # look at the first game\nprint(json.dumps(game1, indent=4)) # print the new dictionary object\nprint(\"\")\ngame1_date = game1[\"gameDate\"]\nprint(\"The date of the Sabres first game this season is: \" + str(game1_date))\ngame1_ID = game1[\"id\"]\nprint(\"The ID of the Sabres first game this season is: \" + str(game1_ID))\n```\n:::\n\n\n:::{.scrolling}\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://api-web.nhle.com/v1/club-schedule-season/BUF/20222023\n{\n    \"id\": 2022010006,\n    \"season\": 20222023,\n    \"gameType\": 1,\n    \"gameDate\": \"2022-09-25\",\n    \"venue\": {\n        \"default\": \"Capital One Arena\"\n    },\n    \"neutralSite\": false,\n    \"startTimeUTC\": \"2022-09-25T18:00:00Z\",\n    \"easternUTCOffset\": \"-04:00\",\n    \"venueUTCOffset\": \"-04:00\",\n    \"venueTimezone\": \"US/Eastern\",\n    \"gameState\": \"FINAL\",\n    \"gameScheduleState\": \"OK\",\n    \"tvBroadcasts\": [\n        {\n            \"id\": 320,\n            \"market\": \"H\",\n            \"countryCode\": \"US\",\n            \"network\": \"NBCSWA\",\n            \"sequenceNumber\": 1\n        },\n        {\n            \"id\": 324,\n            \"market\": \"N\",\n            \"countryCode\": \"US\",\n            \"network\": \"NHLN\",\n            \"sequenceNumber\": 1\n        }\n    ],\n    \"awayTeam\": {\n        \"id\": 7,\n        \"placeName\": {\n            \"default\": \"Buffalo\"\n        },\n        \"abbrev\": \"BUF\",\n        \"logo\": \"https://assets.nhle.com/logos/nhl/svg/BUF_light.svg\",\n        \"darkLogo\": \"https://assets.nhle.com/logos/nhl/svg/BUF_dark.svg\",\n        \"awaySplitSquad\": false,\n        \"score\": 4\n    },\n    \"homeTeam\": {\n        \"id\": 15,\n        \"placeName\": {\n            \"default\": \"Washington\"\n        },\n        \"abbrev\": \"WSH\",\n        \"logo\": \"https://assets.nhle.com/logos/nhl/svg/WSH_light.svg\",\n        \"darkLogo\": \"https://assets.nhle.com/logos/nhl/svg/WSH_dark.svg\",\n        \"homeSplitSquad\": false,\n        \"score\": 3\n    },\n    \"periodDescriptor\": {\n        \"periodType\": \"OT\"\n    },\n    \"gameOutcome\": {\n        \"lastPeriodType\": \"OT\"\n    },\n    \"winningGoalie\": {\n        \"playerId\": 8480045,\n        \"firstInitial\": {\n            \"default\": \"U.\"\n        },\n        \"lastName\": {\n            \"default\": \"Luukkonen\"\n        }\n    },\n    \"winningGoalScorer\": {\n        \"playerId\": 8476994,\n        \"firstInitial\": {\n            \"default\": \"V.\"\n        },\n        \"lastName\": {\n            \"default\": \"Hinostroza\"\n        }\n    },\n    \"gameCenterLink\": \"/gamecenter/buf-vs-wsh/2022/09/25/2022010006\"\n}\n\nThe date of the Sabres first game this season is: 2022-09-25\nThe ID of the Sabres first game this season is: 2022010006\n```\n:::\n:::\n\n\n:::\n<br/>\n\nUnfortunately, this data structure doesn't show us the goals scored by each player. To find that, we'll need to cross reference a different database.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nlink = \"https://api-web.nhle.com/v1/score/\" + str(game1_date)\nbox_scores = json.loads(requests.get(link).text)[\"games\"] # pull request, get data (.text), and convert JSON to a Python dict\n\ngame1_score = next(item for item in box_scores if item['id'] == game1_ID) # find the Sabres game using the game ID from our previous bit of code\n\nprint(json.dumps(game1_score, indent=4)) # print the new dictionary object\n```\n:::\n\n\n:::{.scrolling}\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n    \"id\": 2022010006,\n    \"season\": 20222023,\n    \"gameType\": 1,\n    \"gameDate\": \"2022-09-25\",\n    \"venue\": {\n        \"default\": \"Capital One Arena\"\n    },\n    \"startTimeUTC\": \"2022-09-25T18:00:00Z\",\n    \"easternUTCOffset\": \"-04:00\",\n    \"venueUTCOffset\": \"-04:00\",\n    \"tvBroadcasts\": [\n        {\n            \"id\": 320,\n            \"market\": \"H\",\n            \"countryCode\": \"US\",\n            \"network\": \"NBCSWA\",\n            \"sequenceNumber\": 1\n        },\n        {\n            \"id\": 324,\n            \"market\": \"N\",\n            \"countryCode\": \"US\",\n            \"network\": \"NHLN\",\n            \"sequenceNumber\": 1\n        }\n    ],\n    \"gameState\": \"FINAL\",\n    \"gameScheduleState\": \"OK\",\n    \"awayTeam\": {\n        \"id\": 7,\n        \"name\": {\n            \"default\": \"Sabres\"\n        },\n        \"abbrev\": \"BUF\",\n        \"score\": 4,\n        \"sog\": 28,\n        \"logo\": \"https://assets.nhle.com/logos/nhl/svg/BUF_light.svg\"\n    },\n    \"homeTeam\": {\n        \"id\": 15,\n        \"name\": {\n            \"default\": \"Capitals\"\n        },\n        \"abbrev\": \"WSH\",\n        \"score\": 3,\n        \"sog\": 27,\n        \"logo\": \"https://assets.nhle.com/logos/nhl/svg/WSH_light.svg\"\n    },\n    \"gameCenterLink\": \"/gamecenter/buf-vs-wsh/2022/09/25/2022010006\",\n    \"clock\": {\n        \"timeRemaining\": \"03:45\",\n        \"secondsRemaining\": 225,\n        \"running\": false,\n        \"inIntermission\": false\n    },\n    \"neutralSite\": false,\n    \"venueTimezone\": \"US/Eastern\",\n    \"period\": 4,\n    \"periodDescriptor\": {\n        \"number\": 4,\n        \"periodType\": \"OT\"\n    },\n    \"gameOutcome\": {\n        \"lastPeriodType\": \"OT\",\n        \"otPeriods\": 1\n    },\n    \"goals\": [\n        {\n            \"period\": 1,\n            \"periodDescriptor\": {\n                \"number\": 1,\n                \"periodType\": \"REG\"\n            },\n            \"timeInPeriod\": \"04:05\",\n            \"playerId\": 8477511,\n            \"name\": {\n                \"default\": \"A. Mantha\"\n            },\n            \"mugshot\": \"https://assets.nhle.com/mugs/nhl/20222023/WSH/8477511.png\",\n            \"teamAbbrev\": \"WSH\",\n            \"goalsToDate\": 1,\n            \"awayScore\": 0,\n            \"homeScore\": 1,\n            \"strength\": \"PP\",\n            \"highlightClip\": 6335818566112\n        },\n        {\n            \"period\": 2,\n            \"periodDescriptor\": {\n                \"number\": 2,\n                \"periodType\": \"REG\"\n            },\n            \"timeInPeriod\": \"04:25\",\n            \"playerId\": 8481528,\n            \"name\": {\n                \"default\": \"D. Cozens\"\n            },\n            \"mugshot\": \"https://assets.nhle.com/mugs/nhl/20222023/BUF/8481528.png\",\n            \"teamAbbrev\": \"BUF\",\n            \"goalsToDate\": 1,\n            \"awayScore\": 1,\n            \"homeScore\": 1,\n            \"strength\": \"PP\",\n            \"highlightClip\": 6335819727112\n        },\n        {\n            \"period\": 2,\n            \"periodDescriptor\": {\n                \"number\": 2,\n                \"periodType\": \"REG\"\n            },\n            \"timeInPeriod\": \"09:16\",\n            \"playerId\": 8482896,\n            \"name\": {\n                \"default\": \"T. Kozak\"\n            },\n            \"mugshot\": \"https://assets.nhle.com/mugs/nhl/20222023/BUF/8482896.png\",\n            \"teamAbbrev\": \"BUF\",\n            \"goalsToDate\": 1,\n            \"awayScore\": 2,\n            \"homeScore\": 1,\n            \"strength\": \"EV\",\n            \"highlightClip\": 6335819725112\n        },\n        {\n            \"period\": 2,\n            \"periodDescriptor\": {\n                \"number\": 2,\n                \"periodType\": \"REG\"\n            },\n            \"timeInPeriod\": \"09:42\",\n            \"playerId\": 8477839,\n            \"name\": {\n                \"default\": \"C. Sheary\"\n            },\n            \"mugshot\": \"https://assets.nhle.com/mugs/nhl/20222023/WSH/8477839.png\",\n            \"teamAbbrev\": \"WSH\",\n            \"goalsToDate\": 1,\n            \"awayScore\": 2,\n            \"homeScore\": 2,\n            \"strength\": \"EV\",\n            \"highlightClip\": 6335818367112\n        },\n        {\n            \"period\": 3,\n            \"periodDescriptor\": {\n                \"number\": 3,\n                \"periodType\": \"REG\"\n            },\n            \"timeInPeriod\": \"05:43\",\n            \"playerId\": 8481441,\n            \"name\": {\n                \"default\": \"J. Snively\"\n            },\n            \"mugshot\": \"https://assets.nhle.com/mugs/nhl/20222023/WSH/8481441.png\",\n            \"teamAbbrev\": \"WSH\",\n            \"goalsToDate\": 1,\n            \"awayScore\": 2,\n            \"homeScore\": 3,\n            \"strength\": \"EV\",\n            \"highlightClip\": 6335819254112\n        },\n        {\n            \"period\": 3,\n            \"periodDescriptor\": {\n                \"number\": 3,\n                \"periodType\": \"REG\"\n            },\n            \"timeInPeriod\": \"18:55\",\n            \"playerId\": 8482097,\n            \"name\": {\n                \"default\": \"J. Quinn\"\n            },\n            \"mugshot\": \"https://assets.nhle.com/mugs/nhl/20222023/BUF/8482097.png\",\n            \"teamAbbrev\": \"BUF\",\n            \"goalsToDate\": 1,\n            \"awayScore\": 3,\n            \"homeScore\": 3,\n            \"strength\": \"PP\",\n            \"highlightClip\": 6335820218112\n        },\n        {\n            \"period\": 4,\n            \"periodDescriptor\": {\n                \"number\": 4,\n                \"periodType\": \"OT\"\n            },\n            \"timeInPeriod\": \"01:15\",\n            \"playerId\": 8476994,\n            \"name\": {\n                \"default\": \"V. Hinostroza\"\n            },\n            \"mugshot\": \"https://assets.nhle.com/mugs/nhl/20222023/BUF/8476994.png\",\n            \"teamAbbrev\": \"BUF\",\n            \"goalsToDate\": 1,\n            \"awayScore\": 4,\n            \"homeScore\": 3,\n            \"strength\": \"EV\",\n            \"highlightClip\": 6335820905112\n        }\n    ]\n}\n```\n:::\n:::\n\n\n:::\n<br/>\n\nThis data structure has info on each goal scored this game. Let's figure out a way to tally the number of goals scored by each player. We'll use the `Counter` function from the `collections` library.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport collections\n\nscorers = [i[\"playerId\"] for i in game1_score['goals']] # extract player IDs for each goal scored\nscorers_table = dict(collections.Counter(scorers)) # count how many goals are scored by each player\n\nprint(\"goals scored by player ID\")\nprint(scorers_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngoals scored by player ID\n{8477511: 1, 8481528: 1, 8482896: 1, 8477839: 1, 8481441: 1, 8482097: 1, 8476994: 1}\n```\n:::\n:::\n\n\n<br/>\n\nNow that we've got the basics, we can set up a loop to go through all Sabres games in the 2022-2023 season.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nteam = \"BUF\"\nseason = 20222023\n\nlink = \"https://api-web.nhle.com/v1/club-schedule-season/\" + str(team) + \"/\" + str(season)\nsched = json.loads(requests.get(link).text) # pull request, get data (.text), and convert JSON to a Python dict\n\nprint(team + \" games with hat tricks...\")\nprint(\"date:{{player_ID: [number_of_goals, player_name]}}\")\nfor game in sched[\"games\"]: # loop through every focal team game in the schedule\n  gameDATE = game[\"gameDate\"]\n  gameID = game[\"id\"]\n\n  link2 = \"https://api-web.nhle.com/v1/score/\" + str(gameDATE)\n  box_scores = json.loads(requests.get(link2).text)[\"games\"] # pull request, get data (.text), and convert JSON to a Python dict\n  score = next(item for item in box_scores if item['id'] == gameID) # find the game using the game ID from our previous bit of code\n\n  team_goals = [d for d in score['goals'] if d['teamAbbrev'] in team] # only get goals scored by the team\n\n  scorers = [i[\"playerId\"] for i in team_goals] # extract player IDs for each goal scored\n  scorers_table = dict(collections.Counter(scorers))  \n\n  hat_tricks_scorers = dict((k, v) for k, v in scorers_table.items() if v >= 3) # get scorers with more than 3 goals\n\n  for key in hat_tricks_scorers: # loop through hat trick scorers\n    player = next(item for item in team_goals if item['playerId']== key)['name']['default'] # get player name based on player ID\n    hat_tricks_scorers[key] = [hat_tricks_scorers[key]] # convert dict value to list\n    hat_tricks_scorers[key] += [player] # add player name as a value to player ID key\n\n  if bool(hat_tricks_scorers): # only return results if there was a hat trick\n    print(gameDATE + \":\" + str(hat_tricks_scorers))\n```\n:::\n\n\n:::{.scrolling}\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\nBUF games with hat tricks...\ndate:{{player_ID: [number_of_goals, player_name]}}\n2022-10-20:{8477949: [3, 'A. Tuch']}\n2022-10-31:{8479420: [3, 'T. Thompson']}\n2022-12-07:{8479420: [5, 'T. Thompson']}\n2022-12-29:{8473449: [3, 'K. Okposo']}\n2023-01-03:{8479420: [3, 'T. Thompson']}\n2023-02-23:{8479420: [3, 'T. Thompson']}\n2023-02-26:{8481528: [3, 'D. Cozens']}\n2023-04-01:{8477949: [3, 'A. Tuch']}\n```\n:::\n:::\n\n\n:::\n<br/>\n\nTage Thompson had 4 hat tricks that season, impressive!\n\nWe can expand this to look at all teams in the 2022-2023 season. It will take a little while to run this code. We'll use the `datetime` and `dateutil` libraries to loop through every day in that season. Also, let's only look at regular season games (`\"gameType\": 2`). Lastly, we also need to ignore shootout goals (encoded by the `periodDescriptor` value), since these aren't counted toward a hat trick.\n\nThis code will take a few minutes to run.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfrom datetime import date, timedelta\nimport dateutil.parser as dateparser\n\nseason = 20222023\n\n# get start and end date of season\nstandings = json.loads(requests.get(\"https://api-web.nhle.com/v1/standings-season\").text)[\"seasons\"] # pull request, get data (.text), and convert JSON to a Python dict\n\nstart_date = dateparser.parse(next(item for item in standings if item[\"id\"] == season)[\"standingsStart\"])\nend_date = dateparser.parse(next(item for item in standings if item[\"id\"] == season)[\"standingsEnd\"])\n\ndelta = timedelta(days=1)\n\nall_hat_tricks = {}\n\nwhile start_date.date() <= end_date.date():\n    date = start_date.strftime(\"%Y-%m-%d\")\n\n    link2 = \"https://api-web.nhle.com/v1/score/\" + str(date)\n    box_scores = json.loads(requests.get(link2).text)[\"games\"] # pull request, get data (.text), and convert JSON to a Python dict\n\n    hat_tricks_scorers_date = {} # empty dictionary to contain all hat trick scorers on this date\n\n    if bool(box_scores): # only look at dates with games\n\n      for game in box_scores: # loop through each game on each date\n        if game['gameType'] == 2: # only look at regular season games\n          goals = [d for d in game[\"goals\"] if d['periodDescriptor']['periodType'] != \"SO\"] # ignore shootout goals\n          scorers = [i[\"playerId\"] for i in goals] # extract player IDs for each goal scored\n          scorers_table = dict(collections.Counter(scorers))  \n          hat_tricks_scorers = dict((k, v) for k, v in scorers_table.items() if v >= 3) # get scorers with more than 3 goals\n          if bool(hat_tricks_scorers): # if there was a hat trick in this game\n            for key in hat_tricks_scorers: # loop through hat trick scorers\n              player = next(item for item in goals if item['playerId'] == key)['name']['default'] # get player name based on player ID\n              team = next(item for item in goals if item['playerId'] == key)['teamAbbrev'] # get player name based on player ID\n              hat_tricks_scorers[key] = [hat_tricks_scorers[key]] # convert dict value to list\n              hat_tricks_scorers[key] += [player] # add player name as a value to player ID key\n              hat_tricks_scorers[key] += [team] # add team abbreviation as a value to player ID key\n              hat_tricks_scorers_date[key] = hat_tricks_scorers[key] # update the date dictionary\n    if bool(hat_tricks_scorers_date): # if there was a hat trick on this date, update the main hat tricks dictionary \n      all_hat_tricks[date] = hat_tricks_scorers_date\n\n    start_date += delta # increment date by 1\n\nprint(\"hat tricks were scored during \" + str(len(all_hat_tricks)) + \" games in the 2022-2023 NHL season\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhat tricks were scored during 66 games in the 2022-2023 NHL season\n```\n:::\n:::\n\n\nLet's convert our messy `all_hat_tricks` dictionary to a cleaner data frame.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf_data = []\nfor i in all_hat_tricks: # loop through all dates\n  for j in all_hat_tricks[i]: # loop through all hat tricks each date\n    df_data.append([i, j, all_hat_tricks[i][j][1], all_hat_tricks[i][j][2], all_hat_tricks[i][j][0]]) # write data for each hat trick to list of list\n\nall_hat_tricks_df = pd.DataFrame(df_data, columns=['date', 'player_ID', 'player_name', 'team', 'goals']) # convert list of lists to dataframe\n\nprint(all_hat_tricks_df.head(5)) # print first five rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         date  player_ID    player_name team  goals\n0  2022-10-12    8478402     C. McDavid  EDM      3\n1  2022-10-20    8480830  A. Svechnikov  CAR      3\n2  2022-10-20    8477949        A. Tuch  BUF      3\n3  2022-10-22    8470794    J. Pavelski  DAL      3\n4  2022-10-27    8478402     C. McDavid  EDM      3\n```\n:::\n:::\n\n\n<br/>\n\nNice, that should be easier to work with.\nHow many hat tricks were there in the 2022-2023 season? \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(\"Number of hat tricks in the 2022-2023 season: \" + str(len(all_hat_tricks_df)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of hat tricks in the 2022-2023 season: 96\n```\n:::\n:::\n\n\n<br/>\n\nHow about a quick plot?\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nimport plotly.express as px\n\nall_hat_tricks_df['hat_tricks'] = range(1, 1 + len(all_hat_tricks_df))\n\nfig = px.line(all_hat_tricks_df, x='date', y=\"hat_tricks\",\n title = \"NHL 2022-2023 Season Hat Tricks\",\n template=\"plotly_dark\",\n line_shape='hv') # line_shape will plot lines as steps\nfig.update_xaxes(title_text=\"\")\nfig.update_yaxes(title_text=\"number of hat tricks\")\nfig.update_traces(line_color='cyan', line_width=3)\n\n# reduce margins for better viewing on mobile\nfig.update_layout(margin=dict(l=20, r=20, b=20))\n\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"404a743a-a8f4-4aae-9611-7607613cf11d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"404a743a-a8f4-4aae-9611-7607613cf11d\")) {                    Plotly.newPlot(                        \"404a743a-a8f4-4aae-9611-7607613cf11d\",                        [{\"hovertemplate\":\"date=%{x}\\u003cbr\\u003ehat_tricks=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"cyan\",\"dash\":\"solid\",\"shape\":\"hv\",\"width\":3},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[\"2022-10-12\",\"2022-10-20\",\"2022-10-20\",\"2022-10-22\",\"2022-10-27\",\"2022-10-29\",\"2022-10-31\",\"2022-11-01\",\"2022-11-01\",\"2022-11-02\",\"2022-11-03\",\"2022-11-04\",\"2022-11-04\",\"2022-11-05\",\"2022-11-10\",\"2022-11-10\",\"2022-11-16\",\"2022-11-17\",\"2022-11-23\",\"2022-11-26\",\"2022-11-29\",\"2022-12-01\",\"2022-12-01\",\"2022-12-03\",\"2022-12-04\",\"2022-12-07\",\"2022-12-11\",\"2022-12-11\",\"2022-12-13\",\"2022-12-13\",\"2022-12-13\",\"2022-12-16\",\"2022-12-17\",\"2022-12-19\",\"2022-12-29\",\"2022-12-29\",\"2022-12-29\",\"2022-12-31\",\"2022-12-31\",\"2023-01-03\",\"2023-01-03\",\"2023-01-07\",\"2023-01-07\",\"2023-01-07\",\"2023-01-08\",\"2023-01-08\",\"2023-01-11\",\"2023-01-14\",\"2023-01-14\",\"2023-01-17\",\"2023-01-18\",\"2023-01-21\",\"2023-01-22\",\"2023-01-26\",\"2023-01-26\",\"2023-02-11\",\"2023-02-11\",\"2023-02-16\",\"2023-02-19\",\"2023-02-21\",\"2023-02-23\",\"2023-02-26\",\"2023-02-26\",\"2023-02-28\",\"2023-02-28\",\"2023-03-02\",\"2023-03-04\",\"2023-03-05\",\"2023-03-11\",\"2023-03-14\",\"2023-03-15\",\"2023-03-17\",\"2023-03-18\",\"2023-03-18\",\"2023-03-18\",\"2023-03-19\",\"2023-03-19\",\"2023-03-19\",\"2023-03-25\",\"2023-03-27\",\"2023-03-28\",\"2023-03-30\",\"2023-04-01\",\"2023-04-01\",\"2023-04-01\",\"2023-04-01\",\"2023-04-01\",\"2023-04-02\",\"2023-04-04\",\"2023-04-06\",\"2023-04-06\",\"2023-04-09\",\"2023-04-12\",\"2023-04-13\",\"2023-04-13\",\"2023-04-14\"],\"xaxis\":\"x\",\"y\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"lakecolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#506784\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"dark\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"bordercolor\":\"rgb(17,17,17)\",\"borderwidth\":1,\"tickwidth\":0},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"number of hat tricks\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"NHL 2022-2023 Season Hat Tricks\"},\"margin\":{\"l\":20,\"r\":20,\"b\":20}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('404a743a-a8f4-4aae-9611-7607613cf11d');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n<br/>\n\nI wonder which NHL season had the most hat tricks per game played. To answer this question, we can loop over all NHL seasons and extract the hat trick data. \n\nThis code will take a few hours to run since we're doing a lot of API queries. \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfrom datetime import date, timedelta\nimport dateutil.parser as dateparser\n\n# get start and end date of season\nstandings = json.loads(requests.get(\"https://api-web.nhle.com/v1/standings-season\").text)[\"seasons\"] # pull request, get data (.text), and convert JSON to a Python dict\n\n# data structures to store results\nevery_hat_trick=[]\nhat_tricks_by_season=[] \n\nfor season in standings:\n  season_id = season['id']\n\n  if season_id != 20232024: # skip current season\n    \n    start_date = dateparser.parse(season[\"standingsStart\"])\n    end_date = dateparser.parse(season[\"standingsEnd\"])\n\n    delta = timedelta(days=1)\n\n    season_games = 0 # counter for the number of games in the season\n    season_hat_tricks = 0 # counter for the number of hat tricks\n\n    while start_date.date() <= end_date.date():\n        date = start_date.strftime(\"%Y-%m-%d\")\n\n        link2 = \"https://api-web.nhle.com/v1/score/\" + str(date)\n        box_scores = json.loads(requests.get(link2).text)[\"games\"] # pull request, get data (.text), and convert JSON to a Python dict\n\n        hat_tricks_scorers_date = {} # empty dictionary to contain all hat trick scorers on this date\n\n        if bool(box_scores): # only look at dates with games\n\n          for game in box_scores: # loop through each game on each date\n            if game['gameType'] == 2: # only look at regular season games\n              season_games += 1 # increment the number of games for the season\n              goals = [d for d in game[\"goals\"] if d['periodDescriptor']['periodType'] != \"SO\"] # ignore shootout goals\n              scorers = [i[\"playerId\"] for i in goals] # extract player IDs for each goal scored\n              scorers_table = dict(collections.Counter(scorers))  # count the number of goals per player\n              hat_tricks_scorers = dict((k, v) for k, v in scorers_table.items() if v >= 3) # get scorers with more than 3 goals\n              if bool(hat_tricks_scorers): # if there was a hat trick in this game\n                for key in hat_tricks_scorers: # loop through hat trick scorers\n                  player = next(item for item in goals if item['playerId'] == key)['name']['default'] # get player name based on player ID\n                  team = next(item for item in goals if item['playerId'] == key)['teamAbbrev'] # get player name based on player ID\n                  game_id = game['id']\n                  temp = [season_id, game_id, team, key, player, hat_tricks_scorers[key]]\n                  every_hat_trick.append(temp) # add hat trick data to list\n                  season_hat_tricks += 1 # increment number of hat tricks for the season\n\n        start_date += delta # increment date by 1\n    \n    hat_tricks_by_season.append([season_id, season_games, season_hat_tricks]) # add new season data to list\n\n    print(str(season_id) + \", games = \" + str(season_games) + \", hat tricks = \" + str(season_hat_tricks))\n```\n:::\n\n\n:::{.scrolling}\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-stdout}\n```\n19171918, games = 36, hat tricks = 37\n19181919, games = 27, hat tricks = 16\n19191920, games = 48, hat tricks = 35\n19201921, games = 48, hat tricks = 20\n19211922, games = 48, hat tricks = 25\n19221923, games = 48, hat tricks = 17\n19231924, games = 48, hat tricks = 5\n19241925, games = 90, hat tricks = 18\n19251926, games = 126, hat tricks = 18\n19261927, games = 220, hat tricks = 16\n19271928, games = 220, hat tricks = 24\n19281929, games = 220, hat tricks = 4\n19291930, games = 220, hat tricks = 35\n19301931, games = 220, hat tricks = 20\n19311932, games = 192, hat tricks = 18\n19321933, games = 216, hat tricks = 17\n19331934, games = 216, hat tricks = 19\n19341935, games = 216, hat tricks = 13\n19351936, games = 192, hat tricks = 11\n19361937, games = 192, hat tricks = 16\n19371938, games = 192, hat tricks = 11\n19381939, games = 168, hat tricks = 14\n19391940, games = 168, hat tricks = 7\n19401941, games = 168, hat tricks = 6\n19411942, games = 168, hat tricks = 12\n19421943, games = 150, hat tricks = 23\n19431944, games = 150, hat tricks = 43\n19441945, games = 150, hat tricks = 22\n19451946, games = 150, hat tricks = 19\n19461947, games = 180, hat tricks = 26\n19471948, games = 180, hat tricks = 15\n19481949, games = 180, hat tricks = 7\n19491950, games = 210, hat tricks = 10\n19501951, games = 210, hat tricks = 13\n19511952, games = 210, hat tricks = 14\n19521953, games = 210, hat tricks = 10\n19531954, games = 210, hat tricks = 11\n19541955, games = 210, hat tricks = 15\n19551956, games = 210, hat tricks = 10\n19561957, games = 210, hat tricks = 14\n19571958, games = 210, hat tricks = 16\n19581959, games = 210, hat tricks = 21\n19591960, games = 210, hat tricks = 15\n19601961, games = 210, hat tricks = 21\n19611962, games = 210, hat tricks = 14\n19621963, games = 210, hat tricks = 14\n19631964, games = 210, hat tricks = 13\n19641965, games = 210, hat tricks = 12\n19651966, games = 210, hat tricks = 22\n19661967, games = 210, hat tricks = 18\n19671968, games = 444, hat tricks = 41\n19681969, games = 456, hat tricks = 41\n19691970, games = 456, hat tricks = 36\n19701971, games = 546, hat tricks = 52\n19711972, games = 546, hat tricks = 53\n19721973, games = 624, hat tricks = 66\n19731974, games = 624, hat tricks = 66\n19741975, games = 720, hat tricks = 85\n19751976, games = 720, hat tricks = 89\n19761977, games = 720, hat tricks = 59\n19771978, games = 720, hat tricks = 69\n19781979, games = 680, hat tricks = 73\n19791980, games = 840, hat tricks = 81\n19801981, games = 840, hat tricks = 133\n19811982, games = 840, hat tricks = 139\n19821983, games = 840, hat tricks = 108\n19831984, games = 840, hat tricks = 113\n19841985, games = 840, hat tricks = 113\n19851986, games = 840, hat tricks = 114\n19861987, games = 840, hat tricks = 97\n19871988, games = 840, hat tricks = 113\n19881989, games = 840, hat tricks = 119\n19891990, games = 840, hat tricks = 88\n19901991, games = 840, hat tricks = 71\n19911992, games = 880, hat tricks = 101\n19921993, games = 1008, hat tricks = 112\n19931994, games = 1092, hat tricks = 91\n19941995, games = 624, hat tricks = 48\n19951996, games = 1066, hat tricks = 93\n19961997, games = 1066, hat tricks = 74\n19971998, games = 1066, hat tricks = 64\n19981999, games = 1107, hat tricks = 56\n19992000, games = 1148, hat tricks = 53\n20002001, games = 1230, hat tricks = 93\n20012002, games = 1230, hat tricks = 57\n20022003, games = 1230, hat tricks = 75\n20032004, games = 1230, hat tricks = 46\n20052006, games = 1230, hat tricks = 79\n20062007, games = 1230, hat tricks = 71\n20072008, games = 1230, hat tricks = 73\n20082009, games = 1230, hat tricks = 65\n20092010, games = 1230, hat tricks = 67\n20102011, games = 1230, hat tricks = 76\n20112012, games = 1230, hat tricks = 55\n20122013, games = 720, hat tricks = 32\n20132014, games = 1230, hat tricks = 56\n20142015, games = 1230, hat tricks = 49\n20152016, games = 1230, hat tricks = 67\n20162017, games = 1230, hat tricks = 59\n20172018, games = 1271, hat tricks = 81\n20182019, games = 1271, hat tricks = 97\n20192020, games = 1082, hat tricks = 67\n20202021, games = 868, hat tricks = 60\n20212022, games = 1312, hat tricks = 102\n20222023, games = 1312, hat tricks = 96\n```\n:::\n:::\n\n\n:::\n<br/>\n\nPhew, finally done. Let's answer our question about which season has the highest rate of hat tricks.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nhat_tricks_by_season_df = pd.DataFrame(hat_tricks_by_season, columns=['season_long', 'games', 'hat_tricks']) # convert list of lists to dataframe\n\nhat_tricks_by_season_df['hat_tricks_per_game'] = round(hat_tricks_by_season_df['hat_tricks'] / hat_tricks_by_season_df['games'], 3) # calculate number of hat tricks per game\n\nhat_tricks_by_season_df['temp'] = hat_tricks_by_season_df['season_long'].astype(str)\n\nhat_tricks_by_season_df['temp1'] = hat_tricks_by_season_df['temp'].str[:-4]\nhat_tricks_by_season_df['temp2'] = hat_tricks_by_season_df['temp'].str[-4:]\n\nhat_tricks_by_season_df['season'] = hat_tricks_by_season_df[['temp1', 'temp2']].apply(lambda row: '-'.join(row.values.astype(str)), axis=1)\n\nfig = px.bar(hat_tricks_by_season_df, y='hat_tricks_per_game', x=str('season'),\n  template=\"plotly_dark\",\n  hover_name='season',\n  title = \"NHL Hat Trick Rate by Season\")\n\nfig.update_yaxes(title_text=\"hat tricks per game\")\nfig.update_traces(marker_color=\"cyan\") \n\n# reduce margins for better viewing on mobile\nfig.update_layout(margin=dict(l=20, r=20, b=20))\n\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"e20c118f-e19c-4155-b80a-ba77a3f1171d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e20c118f-e19c-4155-b80a-ba77a3f1171d\")) {                    Plotly.newPlot(                        \"e20c118f-e19c-4155-b80a-ba77a3f1171d\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003eseason=%{x}\\u003cbr\\u003ehat_tricks_per_game=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"1917-1918\",\"1918-1919\",\"1919-1920\",\"1920-1921\",\"1921-1922\",\"1922-1923\",\"1923-1924\",\"1924-1925\",\"1925-1926\",\"1926-1927\",\"1927-1928\",\"1928-1929\",\"1929-1930\",\"1930-1931\",\"1931-1932\",\"1932-1933\",\"1933-1934\",\"1934-1935\",\"1935-1936\",\"1936-1937\",\"1937-1938\",\"1938-1939\",\"1939-1940\",\"1940-1941\",\"1941-1942\",\"1942-1943\",\"1943-1944\",\"1944-1945\",\"1945-1946\",\"1946-1947\",\"1947-1948\",\"1948-1949\",\"1949-1950\",\"1950-1951\",\"1951-1952\",\"1952-1953\",\"1953-1954\",\"1954-1955\",\"1955-1956\",\"1956-1957\",\"1957-1958\",\"1958-1959\",\"1959-1960\",\"1960-1961\",\"1961-1962\",\"1962-1963\",\"1963-1964\",\"1964-1965\",\"1965-1966\",\"1966-1967\",\"1967-1968\",\"1968-1969\",\"1969-1970\",\"1970-1971\",\"1971-1972\",\"1972-1973\",\"1973-1974\",\"1974-1975\",\"1975-1976\",\"1976-1977\",\"1977-1978\",\"1978-1979\",\"1979-1980\",\"1980-1981\",\"1981-1982\",\"1982-1983\",\"1983-1984\",\"1984-1985\",\"1985-1986\",\"1986-1987\",\"1987-1988\",\"1988-1989\",\"1989-1990\",\"1990-1991\",\"1991-1992\",\"1992-1993\",\"1993-1994\",\"1994-1995\",\"1995-1996\",\"1996-1997\",\"1997-1998\",\"1998-1999\",\"1999-2000\",\"2000-2001\",\"2001-2002\",\"2002-2003\",\"2003-2004\",\"2005-2006\",\"2006-2007\",\"2007-2008\",\"2008-2009\",\"2009-2010\",\"2010-2011\",\"2011-2012\",\"2012-2013\",\"2013-2014\",\"2014-2015\",\"2015-2016\",\"2016-2017\",\"2017-2018\",\"2018-2019\",\"2019-2020\",\"2020-2021\",\"2021-2022\",\"2022-2023\"],\"legendgroup\":\"\",\"marker\":{\"color\":\"cyan\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"1917-1918\",\"1918-1919\",\"1919-1920\",\"1920-1921\",\"1921-1922\",\"1922-1923\",\"1923-1924\",\"1924-1925\",\"1925-1926\",\"1926-1927\",\"1927-1928\",\"1928-1929\",\"1929-1930\",\"1930-1931\",\"1931-1932\",\"1932-1933\",\"1933-1934\",\"1934-1935\",\"1935-1936\",\"1936-1937\",\"1937-1938\",\"1938-1939\",\"1939-1940\",\"1940-1941\",\"1941-1942\",\"1942-1943\",\"1943-1944\",\"1944-1945\",\"1945-1946\",\"1946-1947\",\"1947-1948\",\"1948-1949\",\"1949-1950\",\"1950-1951\",\"1951-1952\",\"1952-1953\",\"1953-1954\",\"1954-1955\",\"1955-1956\",\"1956-1957\",\"1957-1958\",\"1958-1959\",\"1959-1960\",\"1960-1961\",\"1961-1962\",\"1962-1963\",\"1963-1964\",\"1964-1965\",\"1965-1966\",\"1966-1967\",\"1967-1968\",\"1968-1969\",\"1969-1970\",\"1970-1971\",\"1971-1972\",\"1972-1973\",\"1973-1974\",\"1974-1975\",\"1975-1976\",\"1976-1977\",\"1977-1978\",\"1978-1979\",\"1979-1980\",\"1980-1981\",\"1981-1982\",\"1982-1983\",\"1983-1984\",\"1984-1985\",\"1985-1986\",\"1986-1987\",\"1987-1988\",\"1988-1989\",\"1989-1990\",\"1990-1991\",\"1991-1992\",\"1992-1993\",\"1993-1994\",\"1994-1995\",\"1995-1996\",\"1996-1997\",\"1997-1998\",\"1998-1999\",\"1999-2000\",\"2000-2001\",\"2001-2002\",\"2002-2003\",\"2003-2004\",\"2005-2006\",\"2006-2007\",\"2007-2008\",\"2008-2009\",\"2009-2010\",\"2010-2011\",\"2011-2012\",\"2012-2013\",\"2013-2014\",\"2014-2015\",\"2015-2016\",\"2016-2017\",\"2017-2018\",\"2018-2019\",\"2019-2020\",\"2020-2021\",\"2021-2022\",\"2022-2023\"],\"xaxis\":\"x\",\"y\":[1.028,0.593,0.729,0.417,0.521,0.354,0.104,0.2,0.143,0.073,0.109,0.018,0.159,0.091,0.094,0.079,0.088,0.06,0.057,0.083,0.057,0.083,0.042,0.036,0.071,0.153,0.287,0.147,0.127,0.144,0.083,0.039,0.048,0.062,0.067,0.048,0.052,0.071,0.048,0.067,0.076,0.1,0.071,0.1,0.067,0.067,0.062,0.057,0.105,0.086,0.092,0.09,0.079,0.095,0.097,0.106,0.106,0.118,0.124,0.082,0.096,0.107,0.096,0.158,0.165,0.129,0.135,0.135,0.136,0.115,0.135,0.142,0.105,0.085,0.115,0.111,0.083,0.077,0.087,0.069,0.06,0.051,0.046,0.076,0.046,0.061,0.037,0.064,0.058,0.059,0.053,0.054,0.062,0.045,0.044,0.046,0.04,0.054,0.048,0.064,0.076,0.062,0.069,0.078,0.073],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"lakecolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#506784\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"dark\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"gridwidth\":2,\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\"}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"bordercolor\":\"rgb(17,17,17)\",\"borderwidth\":1,\"tickwidth\":0},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"bgcolor\":\"rgb(17,17,17)\",\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"season\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"hat tricks per game\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"NHL Hat Trick Rate by Season\"},\"barmode\":\"relative\",\"margin\":{\"l\":20,\"r\":20,\"b\":20}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('e20c118f-e19c-4155-b80a-ba77a3f1171d');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n<br/>\n\nThe NHL's early seasons were the golden age of hat tricks. On average, there was actually more than one hat trick per game during the very first season! The rate of hat tricks declined drastically in the 1920s and 30s.\n\nSo what caused this decline? Probably many factors. First, improved goalie equipment coupled with rule changes led to a decline in scoring. According to [hockey-reference.com](https://www.hockey-reference.com/leagues/stats.html), teams averaged 4.75 goals per game during the 1917-1918 NHL season. Compare that to only 3.18 goals per game in 2022-2023 season. \n\nSecond, and perhaps more importantly, team rosters have gotten larger. In the early years of the NHL, only 9 skaters per team were allowed to play during any given game. Todays teams have twice as many skaters per game. More players on the team means less ice time for any given player and fewer opportunities to rack up goals. \n\nA complete analysis of hat trick rates would require consideration of these factors and more.\n\nOne last question. How many times has more than one hat trick been scored in an NHL game?\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nevery_hat_trick_df = pd.DataFrame(every_hat_trick, columns=['season_id', \"game_id\", 'team', 'player_id', 'player', 'goals']) # convert list of lists to dataframe\n\nprint(\"there have been \" + str(len(every_hat_trick_df.index)) + \" hat tricks in NHL history\")\nprint(\"\")\n\ngames_hts = dict(collections.Counter(every_hat_trick_df['game_id'])) # count hat tricks for each game\nmulti_ht_games = dict((k, v) for k, v in games_hts.items() if v >= 2) # get only games with multiple hat tricks\n\nprint(\"there have been \" + str(len(multi_ht_games)) + \" games with multiple hat tricks\")\nprint(\"\")\n\nthree_ht_games = dict((k, v) for k, v in games_hts.items() if v >= 3) # get only games with more than 3 hat tricks\n\nprint(\"there have been \" + str(len(three_ht_games)) + \" games with more than 3 hat tricks\")\n\nprint(\"\")\n\n# find the game with the most hat tricks\nmax_hts = max(games_hts.values())\nn_games_max = sum(value == max_hts for value in games_hts.values()) # how many games have the max number of hat tricks?\n\nmax_ht_games = dict((k, v) for k, v in games_hts.items() if v >= max_hts) # get only games with multiple hat tricks\n\nprint(\"the maximum number of hat tricks scored in an NHL game is \" + str(max_hts))\nprint(\"there have been \" + str(n_games_max) + \" games with \" + str(max_hts) + \" hat tricks\")\n\nc = 1\nfor i in max_ht_games:\n  print(\"game \" + str(c) + \":\")\n  max_hts_df = every_hat_trick_df.loc[every_hat_trick_df['game_id'] == i]\n  print(max_hts_df)\n  c += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthere have been 5086 hat tricks in NHL history\n\nthere have been 239 games with multiple hat tricks\n\nthere have been 18 games with more than 3 hat tricks\n\nthe maximum number of hat tricks scored in an NHL game is 4\nthere have been 3 games with 4 hat tricks\ngame 1:\n   season_id     game_id team  player_id      player  goals\n4   19171918  1917020003  TAN    8447832  H. Meeking      3\n5   19171918  1917020003  TAN    8445873  C. Denneny      3\n6   19171918  1917020003  TAN    8448013    R. Noble      3\n7   19171918  1917020003  SEN    8445874  C. Denneny      3\ngame 2:\n    season_id     game_id team  player_id       player  goals\n59   19191920  1919020011  MTL    8448154     D. Pitre      3\n60   19191920  1919020011  MTL    8447289   N. Lalonde      6\n61   19191920  1919020011  MTL    8445496  O. Cleghorn      3\n62   19191920  1919020011  TSP    8448013     R. Noble      3\ngame 3:\n    season_id     game_id team  player_id       player  goals\n76   19191920  1919020042  MTL    8448154     D. Pitre      3\n77   19191920  1919020042  MTL    8445496  O. Cleghorn      3\n78   19191920  1919020042  MTL    8447289   N. Lalonde      4\n79   19191920  1919020042  MTL    8445314   H. Cameron      4\n```\n:::\n:::\n\n\n<br/>\n\nWow, three games with four hat tricks each! \n\nLet's look at the first game with four hat tricks. We can look at the [box score](https://www.hockey-reference.com/boxscores/191712220TRA.html) for this game where the Toronto Arenas (TAN) blew out the Ottawa Senators (SEN) by a score of 11-4. However, one Ottawa player still managed to score a hat trick. \n\nOttawa's hat trick was scored by a player named \"C. Denneny.\" Weirdly, there was also a Toronto hat trick scorer named \"C. Denneny.\" As it turns out, Corb Denneny (Toronto) and Cy Denneny (Ottawa) were brothers! Both are now members of the Hockey Hall of Fame. \n\nI wonder how many times brothers or relatives have scored hat tricks in the same game.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprint(\"the following games have multiple hat tricks scored by players with the same last name:\")\nprint(\"\")\n\nfor i in multi_ht_games:\n  temp = every_hat_trick_df[every_hat_trick_df['game_id'] == i] # get data for multi hat trick games\n  temp2 = temp['player'].str[3:].tolist() # convert player column to list\n  temp2_set = set(temp2) # create set\n  if len(temp2) != len(temp2_set): # if lengths are not equal, list contains duplicate values\n    brother_hts = every_hat_trick_df.loc[every_hat_trick_df['game_id'] == i]\n    print(brother_hts)\n```\n:::\n\n\n:::{.scrolling}\n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-stdout}\n```\nthe following games have multiple hat tricks scored by players with the same last name:\n\ngame 1:\n   season_id     game_id team  player_id      player  goals\n4   19171918  1917020003  TAN    8447832  H. Meeking      3\n5   19171918  1917020003  TAN    8445873  C. Denneny      3\n6   19171918  1917020003  TAN    8448013    R. Noble      3\n7   19171918  1917020003  SEN    8445874  C. Denneny      3\ngame 2:\n    season_id     game_id team  player_id      player  goals\n17   19171918  1917020013  SEN    8445844  J. Darragh      3\n18   19171918  1917020013  SEN    8445874  C. Denneny      3\n19   19171918  1917020013  TAN    8445873  C. Denneny      3\ngame 3:\n     season_id     game_id team  player_id       player  goals\n112   19211922  1921020018  MTL    8445497  S. Cleghorn      4\n113   19211922  1921020018  MTL    8445496  O. Cleghorn      4\ngame 4:\n     season_id     game_id team  player_id      player  goals\n127   19211922  1921020041  TSP    8445873  C. Denneny      3\n128   19211922  1921020041  SEN    8445874  C. Denneny      4\ngame 5:\n     season_id     game_id team  player_id      player  goals\n557   19461947  1946020149  CHI    8445062  D. Bentley      4\n558   19461947  1946020149  NYR    8449363  G. Warwick      3\n559   19461947  1946020149  CHI    8445063  M. Bentley      3\ngame 6:\n      season_id     game_id team  player_id      player  goals\n1757   19801981  1980020621  QUE    8451689  P. Stastny      3\n1758   19801981  1980020621  QUE    8451688  A. Stastny      3\ngame 7:\n      season_id     game_id team  player_id      player  goals\n1761   19801981  1980020636  QUE    8451689  P. Stastny      4\n1762   19801981  1980020636  QUE    8451688  A. Stastny      3\n1763   19801981  1980020636  QUE    8450815  J. Richard      3\n```\n:::\n:::\n\n\n:::\n<br/>\n\nThere have been seven NHL games where two players with the same last name both scored hat tricks! Turns out our brothers from the previous code block, Corb Denneny and Cy Denneny, have actually scored hat tricks together three separate times. \n\nOdie and Sprague Cleghorn are another pair of brothers who scored a hat trick in the same game, but this time they both played for the same team. In 1946, brother Dough and Max Bentley achieved a similar feat while both playing for the Chicago Blackhawks. \n\nAnd lastly, brothers Peter and Anton Šťastný of the Quebec Nordiques scored hat tricks together twice in the 1980-1981 season. This was their first year in the NHL, having just defected to Canada from communist Czechoslovakia.\n\nThis is one of my favorite things about digging through sports databases. You can find all manner of strange statistical anomalies and reveal fascinating human stories that might have otherwise been lost to time.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.27.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}