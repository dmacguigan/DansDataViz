---
title: "Does Hockey Roster Turnover Relate to Team Performance?"
author: "Dan MacGuigan"
date: "2024-01-05"
categories: [python, API, visualization, sports, hockey]

css: styles.css
---

Today we're going to practice Python coding and API usage by exploring data for the National Hockey League.

While watching my favorite team this year (the Philadelphia Flyers), I've felt like I barely know the players. It seems like there was a lot of turnover in the roster over the past couple of years. 

Can we quantify this roster turnover? Which seasons did the Flyers roster experience the most turnover?

To answer this question, we will turn to the NHL's own [stats database](https://www.nhl.com/stats/). Unfortunately, we can only download 50 records at a time using their nice web browser interface. So instead, we'll need to use an Application Programming Interface, or API.

Fortunately, some folks have put together nice documentation [here](https://gitlab.com/dword4/nhlapi/-/blob/master/new-api.md) and [here](https://github.com/Zmalski/NHL-API-Reference?tab=readme-ov-file#get-team-roster-by-season) for the NHL API.

To start, we'll use the `requests` and `json` Python libraries. Make sure you have them installed.

Let's do a toy example where we pull the current NHL standings. I'm pulling heavily from [this tutorial](https://www.askpython.com/python/examples/pull-data-from-an-api).

```{python}
#| eval: false
import requests
import json
test = requests.get('https://api-web.nhle.com/v1/standings/now') # pull data
test_data = test.text # get just the data
parse_json = json.loads(test_data) # parse the JSON data into a Python dictionary
print(json.dumps(parse_json, indent=4)) # print the new dictionary object
```

:::{.scrolling}
```{python}
#| echo: false
import requests
import json
test = requests.get('https://api-web.nhle.com/v1/standings/now') # pull data
test_data = test.text # get just the data
parse_json = json.loads(test_data) # parse the JSON data into a Python dictionary
print(json.dumps(parse_json, indent=4)) # print the new dictionary object
```
:::
<br/>
Ok, this is cool! We can see all of the data is in the `standings` item. But it's difficult to scroll through the whole data structure.

Let's see if we can figure out how many wins the Philadelphia Flyers have this year. We'll go step by step, but you could write most of this code as a single line.

```{python}
#| eval: false
standings = parse_json['standings'] # get the standings 
flyers = next(item for item in standings if item['teamName']['default'] == 'Philadelphia Flyers') # find the list item with teamName 'Philadelphia Flyers'
flyers_wins = flyers['wins'] # find the wins item in the Flyers dictionary
print("The Philadelphia Flyers have", flyers_wins, "wins") 
```

:::{.scrolling}
```{python}
#| echo: false
standings = parse_json['standings'] # get the standings 
flyers = next(item for item in standings if item['teamName']['default'] == 'Philadelphia Flyers') # find the list item with teamName 'Philadelphia Flyers'
flyers_wins = flyers['wins'] # find the wins item in the Flyers dictionary
print("The Philadelphia Flyers have", flyers_wins, "wins") 
```
:::
<br/>
Nice! So that's the basics of how to navigate these data structures in Python. Let's try something more involved.

Let's pull the current roster for the Philadelphia Flyers

```{python}
#| eval: false
roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/current') # pull current roster
roster_data = roster.text # get just the data
roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary
print(json.dumps(roster_dict, indent=4)) # print the new dictionary object
```

:::{.scrolling}
```{python}
#| echo: false
roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/current') # pull current roster
roster_data = roster.text # get just the data
roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary
print(json.dumps(roster_dict, indent=4)) # print the new dictionary object
```
:::
<br/>
Pretty messy. How about we just identify the keys in the dictionary?

```{python}
#| eval: false
roster_dict.keys()
```

:::{.scrolling}
```{python}
#| echo: false
roster_dict.keys()
```
:::
<br/>
Nice, so now let's access the `forwards` element, then try to spit out the first player name.

```{python}
#| eval: false
lastName = roster_dict['forwards'][0]['lastName']['default'] # access the 1st (0th) element of the forwards list, then get their last name
firstName = roster_dict['forwards'][0]['firstName']['default'] # access the 1st (0th) element of the forwards list, then get their first name
print("Let's meet our first Flyers forward: ", firstName, " ", lastName, "!", sep='') # sep='' prints the output without spaces between the elements 
```

:::{.scrolling}
```{python}
#| echo: false
lastName = roster_dict['forwards'][0]['lastName']['default'] # access the 1st (0th) element of the forwards list, then get their last name
firstName = roster_dict['forwards'][0]['firstName']['default'] # access the 1st (0th) element of the forwards list, then get their first name
print("Let's meet our first Flyers forward: ", firstName, " ", lastName, "!", sep='') # sep='' prints the output without spaces between the elements 
```
:::
<br/>
Now let's try printing a list of all Flyers players on the current roster.

```{python}
#| eval: false
print("Introducing the full Flyers lineup!")
print("")
print("FORWARDS:")
for x in roster_dict['forwards']: # loop through all items in the roster_dict forwards list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("DEFENSEMEN:")
for x in roster_dict['defensemen']: # loop through all items in the roster_dict defensemen list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("GOALIES:")
for x in roster_dict['goalies']: # loop through all items in the roster_dict goalies list
  print(x['firstName']['default'], x['lastName']['default'])
```

:::{.scrolling}
```{python}
#| echo: false
print("Introducing the full Flyers lineup!")
print("")
print("FORWARDS:")
for x in roster_dict['forwards']: # loop through all items in the roster_dict forwards list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("DEFENSEMEN:")
for x in roster_dict['defensemen']: # loop through all items in the roster_dict defensemen list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("GOALIES:")
for x in roster_dict['goalies']: # loop through all items in the roster_dict goalies list
  print(x['firstName']['default'], x['lastName']['default'])
```
:::
<br/>
After a bit of digging [here](https://github.com/Zmalski/NHL-API-Reference?tab=readme-ov-file#get-team-roster-by-season), it looks like we can access historic team rosters in a similar manner.

```{python}
#| eval: false
roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/19931994') # pull roster for 1993-1994 season
roster_data = roster.text # get just the data
roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary

print("Introducing the 1993-1994 Flyers lineup!")
print("")
print("FORWARDS:")
for x in roster_dict['forwards']: # loop through all items in the roster_dict forwards list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("DEFENSEMEN:")
for x in roster_dict['defensemen']: # loop through all items in the roster_dict defensemen list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("GOALIES:")
for x in roster_dict['goalies']: # loop through all items in the roster_dict goalies list
  print(x['firstName']['default'], x['lastName']['default'])
```

:::{.scrolling}
```{python}
#| echo: false
roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/19931994') # pull roster for 1993-1994 season
roster_data = roster.text # get just the data
roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary

print("Introducing the 1993-1994 Flyers lineup!")
print("")
print("FORWARDS:")
for x in roster_dict['forwards']: # loop through all items in the roster_dict forwards list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("DEFENSEMEN:")
for x in roster_dict['defensemen']: # loop through all items in the roster_dict defensemen list
  print(x['firstName']['default'], x['lastName']['default'])
print("")
print("GOALIES:")
for x in roster_dict['goalies']: # loop through all items in the roster_dict goalies list
  print(x['firstName']['default'], x['lastName']['default'])
```
:::
<br/>
Now for the real question. How much turnover does the Flyers roster have from year to year? When did we see peak turnover?

For this, we'll need to loop through all of the Flyers seasons, pull the rosters, and compare with the previous year's roster.

Let's start by just looping through rosters year-by-year. The Flyers first season was in 1967-1968.

The NHL API uses the format YEARYEAR to name its seasons. E.g. the season starting in 1967 is `19671968`.

Also, let's start in 1968, since there was no roster continuity for the 1967 season.

Lastly, we'll need to skip the 2004-2005 season, as it was canceled due to a player lockout. Let's just pretend there were not roster changes that season.

```{python}
#| eval: false
for i in range(1968, 2024): 
  j = i + 1 # get next year
  k = i - 1 # get previous year
  season = str(i) + str(j)
  prev_season = str(k) + str(i)

  if i == 2004:
    roster_dict = prev_roster_dict

  else: 
    roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + season) # pull roster
    roster_data = roster.text # get just the data
    roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary

  if season == 1968: # use a conditional to skip this pull request for future years
    prev_roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + season) # pull previous season roster
    prev_roster_data = prev_roster.text # get just the data
    prev_roster_dict = json.loads(prev_roster_data) # parse the JSON data into a Python dictionary

  lastName = roster_dict['forwards'][0]['lastName']['default'] # access the 1st (0th) element of the forwards list, then get their last name
  firstName = roster_dict['forwards'][0]['firstName']['default'] # access the 1st (0th) element of the forwards list, then get their first name

  print(i, "-", j, " season: ", firstName, " ", lastName, sep='')

  prev_roster = roster

```

:::{.scrolling}
```{python}
#| echo: false
for i in range(1968, 2024): 
  j = i + 1 # get next year
  k = i - 1 # get previous year
  season = str(i) + str(j)
  prev_season = str(k) + str(i)

  if i == 2004:
    roster_dict = prev_roster_dict

  else: 
    roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + season) # pull roster
    roster_data = roster.text # get just the data
    roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary

  if season == 1968: # use a conditional to skip this pull request for future years
    prev_roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + season) # pull previous season roster
    prev_roster_data = prev_roster.text # get just the data
    prev_roster_dict = json.loads(prev_roster_data) # parse the JSON data into a Python dictionary

  lastName = roster_dict['forwards'][0]['lastName']['default'] # access the 1st (0th) element of the forwards list, then get their last name
  firstName = roster_dict['forwards'][0]['firstName']['default'] # access the 1st (0th) element of the forwards list, then get their first name

  id = roster_dict['forwards'][0]['id']

  print(i, "-", j, " season: ", firstName, " ", lastName, " ID = ", id, sep='')

  prev_roster_dict = roster_dict

```
:::
<br/>
Looking good. However, it will be annoying to compare first and last names every season. Also, what if two players have the same name?

Fortunately, the NHL API assigns each player a unique `id` attribute, so we can use those instead of names.

```{python}
#| eval: false

perc_returning_dict = {} # dict to save percent of returning roster year by year

for i in range(1968, 2024): 
  j = i + 1 # get next year
  k = i - 1 # get previous year
  season = str(i) + str(j)
  prev_season = str(k) + str(i)

  if i == 2004:
    roster_dict = prev_roster_dict

  else: 
    roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + season) # pull roster
    roster_data = roster.text # get just the data
    roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary

  if season == 1968: # use a conditional to skip this pull request for future years
    prev_roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + season) # pull previous season roster
    prev_roster_data = prev_roster.text # get just the data
    prev_roster_dict = json.loads(prev_roster_data) # parse the JSON data into a Python dictionary
  
  prev_roster_ids = [] # create list to contain previous year roster player IDs
  for x in prev_roster_dict: # loop through the dictionary
      for y in prev_roster_dict[x]: # loop through each player
        prev_roster_ids.append(y['id']) # and extract ID

  count = 0 # keep track of how many players are on the roster
  returning = 0 # keep track of how many players returned from the previous season
  for x in roster_dict:
    for y in roster_dict[x]: # loop through each player
      #print(y['id'])
      if y['id'] in prev_roster_ids:
        returning = returning + 1
      count = count + 1 

  perc_returning = round(returning / count * 100, 1)
  print(perc_returning, "% of players returned for the ", i, "-", j, " season", sep="")

  perc_returning_dict[i] = perc_returning # append each year's values to the dictionary

  prev_roster_dict = roster_dict # do this to avoid extra data pull requests
```

:::{.scrolling}
```{python}
#| echo: false

perc_returning_dict = {} # dict to save percent of returning roster year by year

for i in range(1968, 2024): 
  j = i + 1 # get next year
  k = i - 1 # get previous year
  season = str(i) + str(j)
  prev_season = str(k) + str(i)

  if i == 2004:
    roster_dict = prev_roster_dict

  else: 
    roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + season) # pull roster
    roster_data = roster.text # get just the data
    roster_dict = json.loads(roster_data) # parse the JSON data into a Python dictionary

  if i == 1968: # use a conditional to skip this pull request for future years
    prev_roster = requests.get('https://api-web.nhle.com/v1/roster/PHI/' + prev_season) # pull previous season roster
    prev_roster_data = prev_roster.text # get just the data
    prev_roster_dict = json.loads(prev_roster_data) # parse the JSON data into a Python dictionary
  
  prev_roster_ids = [] # create list to contain previous year roster player IDs
  for x in prev_roster_dict: # loop through the dictionary
      for y in prev_roster_dict[x]: # loop through each player
        prev_roster_ids.append(y['id']) # and extract ID

  count = 0 # keep track of how many players are on the roster
  returning = 0 # keep track of how many players returned from the previous season
  for x in roster_dict:
    for y in roster_dict[x]: # loop through each player
      #print(y['id'])
      if y['id'] in prev_roster_ids:
        returning = returning + 1
      count = count + 1 

  perc_returning = round(returning / count * 100, 1)
  print(perc_returning, "% of players returned for the ", i, "-", j, " season", sep="")

  perc_returning_dict[i] = perc_returning # append each year's values to the dictionary

  prev_roster_dict = roster_dict # do this to avoid extra data pull requests
```
:::
<br/>
So now that we have a dictionary with our data values, let's make some figures! We'll use the `plotly` Python library. We'll also need the `pandas` library to format our data as a DataFrame object.

```{python}
import plotly.express as px
import pandas as pd

df = pd.DataFrame(perc_returning_dict.items(), columns=['Year', '% Roster Returning']) # convert dictionary to two column data frame

fig = px.bar(df, x='Year', y='% Roster Returning', title = "Philadelphia Flyers Roster Continuity")

fig.update_layout(
    margin=dict(l=20, r=20, b=20))

fig.show()
```
 <br/>
Pretty bare bones. Let's make it prettier. Let's also drop the 2004-2005 season, since it was a lockout year.

```{python}
import plotly.express as px
import pandas as pd

perc_returning_dict[2004] = None

df = pd.DataFrame(perc_returning_dict.items(), columns=['Year', '% Roster Returning']) # convert dictionary to two column data frame

fig = px.bar(df, x='Year', y='% Roster Returning', title = "Philadelphia Flyers Roster Continuity", template="plotly_dark") # use a dark template for contrast
fig.update_traces(marker_color = "#F74902") # make the bars "Flyers orange"

fig.update_layout(
    margin=dict(l=20, r=20, b=20))

fig.show()
```
<br/>
How well does roster continuity correlated with team performance? Do years with higher continuity also have more wins?

The NHL API does not have an easy way to pull team win-loss records for each season. To get win percentage per season, let's pull league standings on the season end date from every year. Note that have to look at only regulation wins, since the NHL used to allow ties.


```{python}
#| eval: false
s = requests.get('https://api-web.nhle.com/v1/standings-season')
s_data = s.text # get just the data
s_dict = json.loads(s_data) # parse the JSON data into a Python dictionary
s_seasons = s_dict['seasons']

flyers_win_perc = {} # dict to contain win percentage for each year

for i in range(1968, 2024): 
  j = i + 1 # get next year
  year = int(str(i) + str(j))
  if i != 2004: # skip the lockout year
    season = next(item for item in s_seasons if item['id'] == year) # find the flyers in this seasons standings
    season_end = season['standingsEnd']
    stand = requests.get('https://api-web.nhle.com/v1/standings/' + season_end) # pull data from the end of the season
    stand_dict = json.loads(stand.text) # convert to dict
    flyers = next(item for item in stand_dict['standings'] if item['teamName']['default'] == 'Philadelphia Flyers') # find the list item with teamName 'Philadelphia Flyers'
    flyers_winP = flyers['regulationWinPctg'] # find the regulation win percentage item in the Flyers dictionary
    #print(json.dumps(flyers, indent=4)) # print the new dictionary object
    print(i, "-", j, " season win %: ", round(flyers_winP * 100, 1), sep="")
    flyers_win_perc[i] = round(flyers_winP * 100, 1)
  else:
    flyers_win_perc[i] = None
```
:::{.scrolling}
```{python}
#| echo: false
s = requests.get('https://api-web.nhle.com/v1/standings-season')
s_data = s.text # get just the data
s_dict = json.loads(s_data) # parse the JSON data into a Python dictionary
s_seasons = s_dict['seasons']

flyers_win_perc = {} # dict to contain win percentage for each year

for i in range(1968, 2024): 
  j = i + 1 # get next year
  year = int(str(i) + str(j))
  if i != 2004: # skip the lockout year
    season = next(item for item in s_seasons if item['id'] == year) # find the flyers in this seasons standings
    season_end = season['standingsEnd']
    stand = requests.get('https://api-web.nhle.com/v1/standings/' + season_end) # pull data from the end of the season
    stand_dict = json.loads(stand.text) # convert to dict
    flyers = next(item for item in stand_dict['standings'] if item['teamName']['default'] == 'Philadelphia Flyers') # find the list item with teamName 'Philadelphia Flyers'
    flyers_winP = flyers['regulationWinPctg'] # find the regulation win percentage item in the Flyers dictionary
    #print(json.dumps(flyers, indent=4)) # print the new dictionary object
    print(i, "-", j, " season win %: ", round(flyers_winP * 100, 1), sep="")
    flyers_win_perc[i] = round(flyers_winP * 100, 1)
  else:
    flyers_win_perc[i] = None
```
:::
<br/>
Now let's plot regulation win percentage by season.

```{python}
import plotly.express as px
import pandas as pd

df = pd.DataFrame(flyers_win_perc.items(), columns=['Year', 'Regulation Win %']) # convert dictionary to two column data frame

fig = px.bar(df, x='Year', y='Regulation Win %', title = "Philadelphia Flyers Season Performance", template="plotly_dark") # use a dark template for contrast
fig.update_traces(marker_color = "white") # make the bars "Flyers orange"

# reduce margin size (for better viewing on mobile)
fig.update_layout(
    margin=dict(l=20, r=20, b=20))

fig.show()
```
<br/>
What about regulation win percentage vs roster retention?

```{python}
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

perc_returning_dict[2004] = None

df_1 = pd.DataFrame(flyers_win_perc.items(), columns=['Year', 'Regulation Win %']) # convert dictionary to two column data frame

df_2 = pd.DataFrame(perc_returning_dict.items(), columns=['Year', '% Roster Returning']) # convert dictionary to two column data frame

df = pd.merge(df_1, df_2, on="Year")

fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add traces
fig.add_trace(go.Scatter(x=df["Year"], y=df['Regulation Win %'], name="Regulation Win %", marker = dict(color = 'white')), secondary_y=False)

fig.add_trace(go.Scatter(x=df['Year'], y=df['% Roster Returning'], name="% Roster Returning", marker = dict(color="#F74902")), secondary_y=True)

# Add figure title
fig.update_layout(title_text="Philadelphia Flyers Roster Continuity vs Wins")

# Set x-axis title
fig.update_xaxes(title_text="Year")

# Set y-axes titles
fig.update_yaxes(title_text="Regulation Win %", secondary_y=False)
fig.update_yaxes(title_text="% Roster Returning", secondary_y=True)

# theme, hide grid lines, put legend on top
# also reduce margin size (for better viewing on mobile)
# automargin increases the margin size to prevent ticklabels from being cut off or overlapping with axis titles
fig.update_layout(template = "plotly_dark", 
                  yaxis2=dict(showgrid=False), 
                  yaxis=dict(showgrid=False), 
                  margin=dict(l=20, r=20,b=20),
                  legend=dict(orientation="h", 
                    yanchor="bottom", 
                    y=1.02, 
                    xanchor="right", 
                    x=1))

fig.show()
```
<br/>
Neat! We can see the Flyer's "Broad Street Bullies" period in the 70s and early 80s where they had a dominant win percentage, thanks in no small part to their consistent roster.

We can also see a few cases where there's a lag between winning and roster retention. The Flyers winning percentage drops for 5 straight seasons from 1984-1989 and bottoms out around 40% until 1994. But roster retention stays high until 1990, when the Flyers enter a period of roster turmoil. In fact, [Wikipedia](https://en.wikipedia.org/wiki/Philadelphia_Flyers) lists 1991-1994 as the "Rebuilding years."

How about another performance metric, like goal differential proportion? This is a team's goal differential (goals for - goals against) divided by the number of games played. So the larger this number, the more the team is outscoring opponents on average. Negative goal differential proportion means opposing teams outscored the Flyers, while positive values indicate the Flyers outscored other teams.

First let's gather the data.
```{python}
#| eval: false
s = requests.get('https://api-web.nhle.com/v1/standings-season')
s_data = s.text # get just the data
s_dict = json.loads(s_data) # parse the JSON data into a Python dictionary
s_seasons = s_dict['seasons']

flyers_goalP_dict = {} # dict to contain win percentage for each year

for i in range(1968, 2024): 
  j = i + 1 # get next year
  year = int(str(i) + str(j))
  if i != 2004: # skip the lockout year
    season = next(item for item in s_seasons if item['id'] == year) # find the flyers in this seasons standings
    season_end = season['standingsEnd']
    stand = requests.get('https://api-web.nhle.com/v1/standings/' + season_end) # pull data from the end of the season
    stand_dict = json.loads(stand.text) # convert to dict
    flyers = next(item for item in stand_dict['standings'] if item['teamName']['default'] == 'Philadelphia Flyers') # find the list item with teamName 'Philadelphia Flyers'
    flyers_goalP = flyers['goalDifferentialPctg'] # find the regulation win percentage item in the Flyers dictionary
    #print(json.dumps(flyers, indent=4)) # print the new dictionary object
    print(i, "-", j, " goal differential proportion: ", flyers_goalP, sep="")
    flyers_goalP_dict[i] = flyers_goalP
  else:
    flyers_goalP_dict[i] = None
```
:::{.scrolling}
```{python}
#| echo: false
s = requests.get('https://api-web.nhle.com/v1/standings-season')
s_data = s.text # get just the data
s_dict = json.loads(s_data) # parse the JSON data into a Python dictionary
s_seasons = s_dict['seasons']

flyers_goalP_dict = {} # dict to contain win percentage for each year

for i in range(1968, 2024): 
  j = i + 1 # get next year
  year = int(str(i) + str(j))
  if i != 2004: # skip the lockout year
    season = next(item for item in s_seasons if item['id'] == year) # find the flyers in this seasons standings
    season_end = season['standingsEnd']
    stand = requests.get('https://api-web.nhle.com/v1/standings/' + season_end) # pull data from the end of the season
    stand_dict = json.loads(stand.text) # convert to dict
    flyers = next(item for item in stand_dict['standings'] if item['teamName']['default'] == 'Philadelphia Flyers') # find the list item with teamName 'Philadelphia Flyers'
    flyers_goalP = flyers['goalDifferentialPctg'] # find the regulation win percentage item in the Flyers dictionary
    #print(json.dumps(flyers, indent=4)) # print the new dictionary object
    print(i, "-", j, " goal differential proportion: ", flyers_goalP, sep="")
    flyers_goalP_dict[i] = flyers_goalP
  else:
    flyers_goalP_dict[i] = None
```
:::
<br/>
Now let's plot goal differential and win percentage together.

```{python}
# make a bar plot
import plotly.express as px
import pandas as pd
import numpy as np

df_1 = pd.DataFrame(flyers_win_perc.items(), columns=['Year', 'Regulation Win %']) # convert dictionary to two column data frame

df_2 = pd.DataFrame(perc_returning_dict.items(), columns=['Year', '% Roster Returning']) # convert dictionary to two column data frame

df_3  = pd.DataFrame(flyers_goalP_dict.items(), columns=['Year', 'Goal Differential Proportion']) # convert dictionary to two column data frame

df = pd.merge(pd.merge(df_1, df_2, on="Year"), df_3, on="Year")

df = df.dropna()

fig = px.bar(df, x='Year', y='Goal Differential Proportion', color="Regulation Win %", title = "Philadelphia Flyers Season Performance", template="plotly_dark") # use a dark template for contrast

fig.update_yaxes(title_text="Goal Differential per Game")

fig.update_layout(coloraxis=dict(colorbar=dict(orientation='h', y=-0.5, xanchor="right", x=1, yanchor="bottom")))

fig.update_layout(
    margin=dict(l=20, r=20, b=20))

fig.show()

```
<br/>
Oof, 2006-2007 was a rough season. In fact, the Flyers finished dead last in the standings that year.

Ok, let's try combining all of this information in one figure. 

```{python}
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

perc_returning_dict[2004] = None

df_1 = pd.DataFrame(flyers_win_perc.items(), columns=['Year', 'Regulation Win %']) # convert dictionary to two column data frame

df_2 = pd.DataFrame(perc_returning_dict.items(), columns=['Year', '% Roster Returning']) # convert dictionary to two column data frame

df_3  = pd.DataFrame(flyers_goalP_dict.items(), columns=['Year', 'Goal Differential Proportion']) # convert dictionary to two column data frame

df = pd.merge(pd.merge(df_1, df_2, on="Year"), df_3, on="Year")

fig = px.scatter(df, x='Regulation Win %', y='Goal Differential Proportion', color='% Roster Returning', template="plotly_dark", color_continuous_scale="Viridis", hover_name="Year", title="Philadelphia Flyers Season Stats")

fig.update_traces(marker=dict(size=10, line=dict(width=0.5, color='white'))) # add white outline around points

fig.update_yaxes(title_text="Goal Differential per Game")

fig.update_layout(margin=dict(l=20, r=20, b=20), 
  coloraxis=dict(colorbar=dict(orientation='h', y=-0.5, xanchor="right", x=1, yanchor="bottom")))

fig.show()

```
<br/>
This figure shows the expected strong positive relationship between winning percentage and goal differential. However, the relationship between team performance and roster continuity is less clear. 

The Flyers' best seasons all had relatively high roster continuity. But the Flyers also had relatively good seasons with high roster turnover. 

For example, in 1998, the Flyers had a positive goal differential, won 43% of their games in regulation, and placed 7th overall in the league. But that season had their lowest ever roster retention, with only 42% of players returning.

Well I think that's enough for this dataset. See you in the next post!
